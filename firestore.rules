rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }
    
    // User actions collection
    match /userActions/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }
    
    // Chats collection
    match /chats/{chatId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.users
      );
      allow create: if isAuthenticated() && (
        request.auth.uid in request.resource.data.users
      );
      allow update: if isAuthenticated() && (
        request.auth.uid in resource.data.users
      );
      allow delete: if isAuthenticated() && (
        request.auth.uid in resource.data.users
      );
    }
    
    // Messages subcollection
    match /chats/{chatId}/messages/{messageId} {
      allow read: if isAuthenticated() && (
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users
      );
      allow create: if isAuthenticated() && (
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.users
      );
    }
    
    // Subscriptions collection
    match /subscriptions/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAuthenticated() && isOwner(userId);
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 